// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: merchants.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
    user_id,
    name,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, user_id, created_at, updated_at
`

type CreateMerchantParams struct {
	UserID      uuid.UUID   `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, createMerchant, arg.UserID, arg.Name, arg.Description)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
DELETE FROM merchants
WHERE id = $1 AND user_id = $2
`

type DeleteMerchantParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteMerchant(ctx context.Context, arg DeleteMerchantParams) error {
	_, err := q.db.Exec(ctx, deleteMerchant, arg.ID, arg.UserID)
	return err
}

const getMerchantByID = `-- name: GetMerchantByID :one
SELECT id, name, description, user_id, created_at, updated_at FROM merchants
WHERE id = $1
`

func (q *Queries) GetMerchantByID(ctx context.Context, id uuid.UUID) (Merchant, error) {
	row := q.db.QueryRow(ctx, getMerchantByID, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMerchantsByUserID = `-- name: ListMerchantsByUserID :many
SELECT id, name, description, user_id, created_at, updated_at FROM merchants
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListMerchantsByUserID(ctx context.Context, userID uuid.UUID) ([]Merchant, error) {
	rows, err := q.db.Query(ctx, listMerchantsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, name, description, user_id, created_at, updated_at
`

type UpdateMerchantParams struct {
	ID          uuid.UUID   `json:"id"`
	UserID      uuid.UUID   `json:"user_id"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, updateMerchant,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
