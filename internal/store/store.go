package store

import (
	"errors"

	"go-api-structure/internal/store/db"
)

// Store defines the interface for all data store operations.
// It embeds the Querier interface generated by sqlc, which provides
// the low-level database access methods.
// Application-specific store interfaces (UserStore, VendorStore, MerchantStore)
// will be defined here and will typically use methods from the embedded Querier.
// This approach allows for a clean separation: sqlc handles raw DB interaction,
// while this package provides a more abstracted, application-aware data access layer.

var (
	// ErrNotFound is returned when a specific resource is not found in the store.
	ErrNotFound = errors.New("store: resource not found")
)

type Store interface {
	db.Querier
	// We can add methods here that might combine multiple Querier calls
	// or perform operations not directly mapped to a single SQL query.
	// For now, embedding Querier is sufficient for basic CRUD, but this
	// provides a place for more complex transaction scripts or business logic
	// related to data access if needed in the future.
}
